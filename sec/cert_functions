#!/usr/bin/env zsh

SEC_UTIL_LOC="$(dirname $(readlink -f $0))"

#todo
# parametrize -config arg

# references
# https://jamielinux.com/docs/openssl-certificate-authority/index.html

####################
# transform/convert operations
####################

# merges x509 certificate and key file into pkcs12 file
# $1 keyfile
# $2 x509 cert files
# $3 output file name
# $4 friendly name for further output file imports
merge_key_with_x509_certificate() {
    openssl pkcs12 -export -inkey $1 -in $2 -out $3 -name $4
}

# merges x509 certificate and key file into pkcs12 file (using CA without chain)
# $1 keyfile
# $2 x509 cert files
# $3 output file name
# $4 friendly name for further output file imports
# $5 ca certificate file
# $6 friendly name for ca certificate
merge_key_with_x509_certificate_with_ca() {
    openssl pkcs12 -export -inkey $1 -in $2 -out $3 -name $4 -CAfile $5 -caname $6
}

# converts pkcs12 formatted certificate into pem (ASCII cert)
# WARN: as pkcs12 contains public AND private key the converted pem file
# will contain clear text private key
# $1 pkcs12 cert file
convert_cert_pkcs12_to_pem() {
    openssl pkcs12 -in $1 -out $1.pem -nodes
}

# converts x509 certificate into der (binary form of ASCII PEM)
# $1 pem certificate
convert_cert_pem_to_der() {
    openssl x509 -outform der -in $1 -out $1.der
}

# converts elliptic curves-based key into der format (binary form of ASCII PEM)
# key must contain two sections:
#-----BEGIN EC PARAMETERS-----
#-----END EC PARAMETERS-----
#-----BEGIN EC PRIVATE KEY-----
#-----END EC PRIVATE KEY-----
# $1 pem private key
convert_ec_key_pem_to_der() {
    openssl ec -outform der -in $1 -out $1.der
}

####################
# import/export operations
####################

# imports pkcs12 key with cert file into keystore
# $1 keystore file name
# $2 keystore password
# $3 pkcs12 formatted input file
# $4 imported file alias
# [$5] keypass if destination keypass is different than this specified in pkcs12 formatted input file
import_to_keystore() {
    if [ -z $5 ]; then
        keytool -importkeystore -destkeystore $1 -deststorepass $2 -srckeystore $3 -srcstoretype PKCS12 -alias $4
    else
        keytool -importkeystore -destkeystore $1 -deststorepass $2 -srckeystore $3 -srcstoretype PKCS12 -alias $4 -destkeypass $5
    fi
}

# removes alias-identified entry from keystore
# $1 keystore file name
# $2 keystore password
# $3 imported file alias
remove_from_keystore() {
    keytool -delete -noprompt -alias $3 -keystore $1 -storepass $2
}

# imports pem cert into truststore (keystore holding root certificates)
# $1 truststore file name
# $2 truststore password
# $3 input certificate file
# $4 imported certificate alias
import_to_truststore() {
    keytool -importcert -keystore $1 -storepass $2 -file $3 -alias $4
}

# export certificate from jks into der format
# $1 keystore file name
# $2 keystore password
# $3 cert alias
# $4 output file name
export_cert_from_keystore_to_der() {
    keytool -exportcert -alias $3 -keystore $1 -storepass $2 -file $4
}

# export certificate from jks into pem format
# $1 keystore file name
# $2 keystore password
# $3 cert alias
# $4 output file name
export_cert_from_keystore_to_pem() {
    keytool -exportcert -rfc -alias $3 -keystore $1 -storepass $2 -file $4
}

# export private key from jks into der format
# $1 keystore file name
# $2 keystore password
# $3 key alias
export_key_from_keystore_to_der() {
    keytool -importkeystore -srckeystore $1 -srcstorepass $2 -destkeystore $1.der -deststoretype DER -srcalias $3
}

# change existing keystore's password
# $1 keystore file name
change_keystore_password() {
    keytool -storepasswd -keystore $1
}

# change existing keystore's password along with private keys' password
# $1 keystore file name
# might not work for pkcs keystores
change_keystore_password_with_all_keys() {
    change_keystore_password $1

    for alias in $(keytool -list -keystore $1 | grep "PrivateKeyEntry" | cut -d, -f1); do
        keytool -keypasswd  -alias ${alias} -keystore $1
    done
}

# import entries to new pkcs12 keystore, assuming storepass is equal to keypass
# $1 source keystore
# $2 destination keystore
# $3 source keystore password
# $4 destination keystore password (also used for key protection)
copy_keystore() {
    keytool -importkeystore -srckeystore $1 -srcstoretype PKCS12 -srcstorepass $3 -deststoretype PKCS12 -deststoretype PKCS12 -deststorepass $4 -destkeypass $4 -keystore $2
}

####################
# generation operations
####################

# generate private key using elliptic curves
# openssl ecparam -list_curves shows all implemented EC parameters names
# $1 output file name
gen_ec_key() {
    openssl ecparam -name prime256v1 -genkey -out $1 && chmod 400 $1
}

# generate private key using RSA
# openssl ecparam -list_curves shows all implemented EC parameters names
# $1 output file name
# $2 key encryption method (eg. -aes256)
gen_rsa_key() {
    if [ -z $2 ]; then
        openssl genrsa -out $1 4096
    else
        openssl genrsa $2 -out $1 4096
    fi
}

# generate x509 self-signed certificate (e.g. CA certificate)
# $1 input private key
# $2 output file name
# $3 config file
# $4 base ssl dir (containing private and certs dirs)
# $5 days validity (10000 otherwise)
gen_x509_cert_self_signed() {
    # -x509 states that this is self-signed (when req)
    # -batch states that this is non-interactive generation
    # -config openssl-ca.cnf use config file
    BASE_DIR=$4 openssl req -config $3 -batch -key $1 -new -x509 -days ${5-10000} -sha256 -extensions v3_ca -out $2
}

gen_x509_cert_self_signed_interactive() {
    # -x509 states that this is self-signed (when req)
    # -batch states that this is non-interactive generation
    # -config openssl-ca.cnf use config file
    BASE_DIR=$4 openssl req -config $3 -key $1 -new -x509 -days ${5-10000} -sha256 -extensions v3_ca -out $2
}

# generate x509 self-signed certificate along with ec private key
# $1 private key output file
gen_x509_cert_and_ec_key_self_signed() {
    openssl req -x509 -newkey ec:<(openssl ecparam -name prime256v1) -keyout $1 -nodes -out $1.pem -days 365
}

# generate (actually sign the csr) x509 certificate using CA
# $1 csr file
# $2 output file name
# $3 config file for signing
# $4 base ssl dir
# [$5] validity days (10000 otherwise)
gen_csr_sign() {
    # todo verify
    #openssl ca -extensions server_cert -days 375 -notext -md sha256 -in $1 -out $2 -cert $3 -keyfile $4
    # todo create method accepting ca files as arg
    # check if this aids -CAcreateserial for those stupid files creation
    BASE_DIR=$4 openssl ca -config $3 -batch -days ${5-10000} -notext -md sha256 -in $1 -out $2
    # if signing intermediate CA, add: -extensions v3_intermediate_ca
}

# generate certificate revocation list
# $1 private key file (ca key)
# $2 certificate
# $3 output crl file
# $4 config file (same as for signing)
# $5 base ssl dir
gen_crl_std() {
    BASE_DIR=$5 openssl ca -gencrl -keyfile $1 -cert $2 -out "$3.nonstd" -config $4
    openssl crl -inform PEM -in "$3.nonstd" -outform DER -out $3 && rm -f "$3.nonstd"
}

# generate certificate revocation list without recommendations from
# http://www.ietf.org/rfc/rfc5280.txt
# $1 private key file (ca key)
# $2 certificate
# $3 output crl file
# $4 config file (same as for signing)
# $5 base ssl dir
gen_crl_nonstd() {
    BASE_DIR=$5 openssl ca -gencrl -keyfile $1 -cert $2 -out $3 -config $4
}

# generate certificate signing request from private key
# $1 input private key
# $2 output file name
# $3 requesting site config file (cert/openssl-server.cnf)
# $4 base ssl directory (containing certs and private directories)
gen_csr() {
    BASE_DIR_SERVER=$4 openssl req -config $3 -new -batch -sha256 -key $1 -out $2
}

gen_csr_interactive() {
  BASE_DIR_SERVER=$4 openssl req -config $3 -new -sha256 -key $1 -out $2
}

# generate CA (RSA based)
gen_ca() {
    ca_config="$SEC_UTIL_LOC/openssl-ca.cnf"
    export UTIL_CA_PRIV_KEY="$1"
    export UTIL_CA_CERT="$2"
    gen_rsa_key $1
    gen_x509_cert_self_signed $1 $2 $ca_config $3  #_interactive?
}

####################
# display operations
####################

# display csr in human-readable format
# $1 certificate signing request
show_csr_as_text() {
    openssl req -text -noout -verify -in $1
}

# display certificate in human-readable format
# $1 certificate
show_crt_as_text() {
    openssl x509 -in $1 -text -noout
}

# display pem crl formatted file details
# $1 crl pem file
show_crl_as_text() {
    openssl crl -in $1 -text
}

# display pkcs12 formatted file in human-readable format
# $1 p12 file
show_pkcs12_as_text() {
    openssl pkcs12 -info -in $1
}

# display keystore contents
# $1 keystore file name
show_keystore() {
    keytool -list -v -keystore $1
}

####################
# verification operations
####################

# compares EC (only) public key extracted from certificate and public key extracted from private key
# $1 private key
# $2 certificate
verify_ec_priv_and_cert() {
    diff <(openssl ec -in $1 -pubout) <(openssl x509 -in $2 -noout -pubkey)
}

# compares RSA (only) public key extracted from certificate and public key extracted from private key
# $1 private key
# $2 certificate
verify_rsa_priv_and_cert() {
    diff <(openssl rsa -noout -modulus -in $1 | openssl md5) <(openssl x509 -noout -modulus -in $2 | openssl md5)
}

# checks whether the certificate is revoked
# $1 CA PEM certificate file
# $2 PEM certificate to check
# $3 CRL certificate
verify_cert_crl() {
    openssl verify -CAfile $1 -crl_check -CRLfile $3 $2
}
