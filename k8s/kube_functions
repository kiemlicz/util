#!/usr/bin/env bash

K8S_UTIL_LOC="$(dirname $(readlink -f $0))"

kube_events() {
  kubectl get events --sort-by='{.lastTimestamp}'
}

kube_debug_once() {
  kubectl run -it --rm debug --image=${1-debian} --restart=Never -- bash
}

kube_debug() {
  local active_ns=$(kubectl config view --minify -o jsonpath='{..namespace}')
  cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  labels:
    role: debug
  name: ${1-debug}
  namespace: ${2-$active_ns}
spec:
  securityContext:
    runAsUser: 0
  containers:
    - image: debian:bullseye
      name: debug
      command:
        - bash
      stdin: true
      tty: true
      securityContext:
        privileged: true
EOF
  kubectl wait --for condition=ready --timeout=${3-10}s pod/${1-debug} -n ${2-$active_ns}
  kubectl exec -it ${1-debug} -n ${2-$active_ns} -c debug -- bash
}


kube_jvm_jstack() {
  if [ -z "$1" ]; then
    echo "POD name required"
    return 1
  fi
  local pod=${1}
  local stacks=${2-20}
  local interval=${3-10}
  local pid=${4-1}
  echo "Assuming JVM is running as PID $pid"
  for i in $(seq 1 $stacks); do
    # fixme pass $pid
    kubectl exec -it $pod -- kill -QUIT 1
    echo "[$(date)] Signal sent ($i times)"
    sleep $interval  # so that lengthy dump surely finishes
    # otherwise k8s may cut the stdout
    echo "Analyzing logs"
    kubectl logs "$1" | python3 $K8S_UTIL_LOC/extract_jvm_thread_dump.py
  done
  echo "Analyzing logs completed"
}
